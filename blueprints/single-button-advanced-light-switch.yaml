blueprint:
  name: Single button advanced light switch
  description: Switch a light on/off by pressing a button. Dim it up/down (depending
    on it's current state) by holding the same button.
  domain: automation
  input:
    button:
      name: Push button
      description: Entity representing a physical push button (which restores its
        position when released). It must emit a square signal on press. This automation
        is triggered by its falling edge.
      selector:
        entity:
          domain:
          - binary_sensor
          - input_boolean
          multiple: false
    light:
      name: Light
      selector:
        entity:
          domain:
          - light
          multiple: false
    last_transition_state:
      name: Last Transition State
      description: Keeps the last dim transition direction, to do the opposite next. 
        If left blank, light will dim down when above 50% brightness and down when below it.
      default:
      selector:
        entity:
          domain:
          - input_number
          multiple: false
    hold_threshold:
      name: Hold threshold
      description: Time to consider button is being held, instead of just pushed.
      default: 0.8
      selector:
        number:
          min: 0.05
          max: 10.0
          step: 0.05
          unit_of_measurement: s
          mode: slider
    brightness_transition_length:
      name: Brightness transition
      description: Transition time for full increase/decrease.
      default: 4.0
      selector:
        number:
          min: 1.0
          max: 10.0
          unit_of_measurement: 's'
          mode: slider
          step: 0.1
    brightness_transition_overshoot_correction:
      name: Overshoot correction
      description: Overshoot correction for brightness transition.
      default: 0.0
      selector:
        number:
          min: -5.0
          max: 5.0
          unit_of_measurement: 'brightness'
          mode: slider
          step: 0.1
    brightness_transition_minimum:
      name: Lower brightness bound
      description: Lower bound for brightness transition.
      default: 0.1
      selector:
        number:
          min: 0.1
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 0.1
    brightness_transition_maximum:
      name: Upper brightness bound
      description: Upper bound for brightness transition.
      default: 100.0
      selector:
        number:
          min: 0.1
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 0.1
  source_url: https://github.com/HairingX/homeassistant/blob/main/blueprints/single-button-on-off-dim-switch.yaml
mode: queued
max: 2
trigger:
- platform: state
  entity_id: !input button
  to: 'on'
action:
- variables:
    entity_id_light: !input light
    entity_id_button: !input button
- wait_for_trigger:
  - platform: state
    entity_id: !input button
    to: 'off'
    from: 'on'
  timeout: !input hold_threshold
  continue_on_timeout: true
- choose:
  - conditions:
    - condition: template
      value_template: '{{ wait.trigger == none }}'
    sequence:
      - variables:
          initial_brightness: '{{ state_attr(entity_id_light, "brightness") | float(0) }}' # must be placed after hold_threshold, to handle Hue lights correctly (Hue 1 change/second bridge limit).
          entity_id_last_transition_state: !input last_transition_state
          brightness_transition_length: !input brightness_transition_length
          brightness_transition_minimum: !input brightness_transition_minimum
          brightness_transition_maximum: !input brightness_transition_maximum
          brightness_transition_overshoot_correction: !input brightness_transition_overshoot_correction
          minimum_brightness: '{{ (1, brightness_transition_minimum * 2.55) | max | round }}'
          maximum_brightness: '{{ (255, (brightness_transition_minimum, brightness_transition_maximum) | max * 2.55) | min | round }}'
          brightness_range: '{{ maximum_brightness - minimum_brightness }}'
          brightness_direction: >
            {% if not not entity_id_last_transition_state and states(entity_id_last_transition_state) | int != 0 %}
              {{ states(entity_id_last_transition_state) | int * -1 }}
            {% elif initial_brightness > brightness_range / 2 %}
              -1
            {% else %}
              1
            {% endif %}
          brightness_target_value: '{{ minimum_brightness if brightness_direction < 0 else maximum_brightness }}'
          brightness_change_diff: '{{ (brightness_target_value - initial_brightness) | abs }}' 
          brightness_change_time: '{{ brightness_transition_length / brightness_range * brightness_change_diff }}' 

#debug logging BEGIN
      - service: system_log.write
        data:
          level: info
          message: '{{ initial_brightness }}'
      - service: system_log.write
        data:
          level: info
          message: '{{ brightness_direction }}'
      - service: system_log.write
        data:
          level: info
          message: '{{ brightness_change_time }}'
      - service: system_log.write
        data:
          level: info
          message: '{{ brightness_target_value }}'
#debug logging END

      - service: light.turn_on
        entity_id: !input light
        data:
          transition: '{{ brightness_change_time }}'
          brightness: '{{ brightness_target_value }}'
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ not not entity_id_last_transition_state }}'
          sequence:
          - service: input_number.set_value
            entity_id: !input last_transition_state
            data:
              value: '{{ brightness_direction }}'
      - wait_for_trigger:
        - platform: state
          entity_id: !input button
          to: 'off'
        timeout: '{{ brightness_change_time if states(entity_id_button) == "on" else 0 }}'
        continue_on_timeout: true
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ wait.remaining > 0 or states(entity_id_button) == "off"}}'
          sequence:

#debug logging BEGIN
          - service: system_log.write
            data:
              level: info
              message: '{{ brightness_range }}'
#debug logging END

          - service: light.turn_on
            entity_id: !input light
            data:
              transition: 0
              brightness: >
                {% if wait.remaining > 0 %}
                  {{ initial_brightness + ((brightness_change_diff / brightness_change_time) * (brightness_change_time - wait.remaining) - brightness_transition_overshoot_correction) * brightness_direction }}
                {% else %}
                  {{ (minimum_brightness, (maximum_brightness, initial_brightness + 2 * brightness_direction) | min) | max }}
                {% endif %}
  default:
  - variables:
      initial_brightness: '{{ state_attr(entity_id_light, "brightness") | float(0) }}'
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ initial_brightness > 0 }}'
      sequence:
        - service: light.turn_off
          entity_id: !input light
        - service: input_number.set_value
          entity_id: !input last_transition_state
          data:
            value: -1
    default:
    - service: light.turn_on
      entity_id: !input light
    - service: input_number.set_value
      entity_id: !input last_transition_state
      data:
        value: 1

