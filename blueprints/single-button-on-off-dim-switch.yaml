blueprint:
  name: Single button dim switch
  description: Switch a light on/off by pressing a button. Dim it up/down (depending
    on it's current state) by holding the same button.
  domain: automation
  input:
    button:
      name: Push button
      description: Entity representing a physical push button (which restores its
        position when released). It must emit a square signal on press. This automation
        is triggered by its falling edge.
      selector:
        entity:
          domain:
          - binary_sensor
          multiple: false
    light:
      name: Light
      selector:
        entity:
          domain:
          - light
          multiple: false
    hold_threshold:
      name: Hold threshold
      description: Time to consider button is being held, instead of just pushed.
      default: 0.8
      selector:
        number:
          min: 0.05
          max: 10.0
          step: 0.05
          unit_of_measurement: s
          mode: slider
    brightness_transition_length:
      name: Brightness transition
      description: Transition time for full increase/decrease.
      default: 4.0
      selector:
        number:
          min: 1.0
          max: 10.0
          unit_of_measurement: 's'
          mode: slider
          step: 0.1
    brightness_transition_minimum_pct:
      name: Lower brightness bound
      description: Lower bound for brightness transition.
      default: 0.1
      selector:
        number:
          min: 0.1
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 0.1
    brightness_transition_maximum_pct:
      name: Upper brightness bound
      description: Upper bound for brightness transition.
      default: 100.0
      selector:
        number:
          min: 0.1
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 0.1
  source_url: https://github.com/HairingX/homeassistant/blob/main/blueprints/single-button-on-off-dim-switch.yaml
mode: single
trigger:
- platform: state
  entity_id: !input button
  to: 'on'
action:
- wait_for_trigger:
  - platform: state
    entity_id: !input button
    to: 'off'
    from: 'on'
  timeout: !input hold_threshold
  continue_on_timeout: true
- choose:
  - conditions:
    - condition: template
      value_template: '{{ wait.trigger == none }}'
    sequence:
      - variables:
          entity_id: !input light
          brightness_transition_length: !input brightness_transition_length
          brightness_transition_minimum: !input brightness_transition_minimum
          brightness_transition_maximum: !input brightness_transition_maximum
          brightness_transition_direction: '{{ -1 if initial_brightness > 130 else 1 }}'
          initial_brightness: '{{ state_attr(entity_id, "brightness") | float(0) }}'
          minimum_brightness: '{{ (1, brightness_transition_minimum * 2.55) | max }}'
          maximum_brightness: '{{ (255, (brightness_transition_minimum, brightness_transition_maximum) | max * 2.55) | min }}'
          brightness_range: '{{ maximum_brightness - minimum_brightness }}'
          brightness_target_value: '{{ 1 if brightness_transition_direction < 0 else maximum_brightness }}'
          brightness_change_diff: '{{ (brightness_target_value - initial_brightness) | abs }}' 
          brightness_change_time: '{{ brightness_transition_length / brightness_range * brightness_change_diff }}' 
      - service: light.turn_on
        entity_id: !input light
        data:
          transition: '{{ brightness_change_time }}'
          brightness: '{{ brightness_target_value }}'
      - wait_for_trigger:
        - platform: state
          entity_id: !input button
          to: 'off'
        timeout: '{{ brightness_change_time }}'
        continue_on_timeout: true
      - choose:
        - conditions:
          - condition: template
            value_template: '{{ wait.remaining > 0 }}'
          sequence:
          - service: light.turn_on
            entity_id: !input light
            data:
              transition: 0
              brightness: '{{ initial_brightness + (brightness_range / brightness_transition_length) * (brightness_change_time - wait.remaining) * brightness_transition_direction }}'
  default:
  - service: light.toggle
    entity_id: !input light
